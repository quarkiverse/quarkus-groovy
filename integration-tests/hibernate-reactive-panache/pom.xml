<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <groupId>io.quarkiverse.groovy</groupId>
        <artifactId>quarkus-groovy-integration-tests</artifactId>
        <version>999-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>quarkus-groovy-integration-tests-hibernate-reactive-panache</artifactId>
    <name>Quarkus Groovy - Integration Tests - Hibernate Reactive with Panache</name>

    <!--
        This is enabled in the Quarkus Maven archetype but not on the integration tests.
        PanacheQuery.project(Class) needs it.
    -->
    <properties>
        <postgres.image>docker.io/postgres:14</postgres.image>
        <postgres.reactive.url>vertx-reactive:postgresql://localhost:5431/hibernate_orm_test</postgres.reactive.url>
    </properties>

    <dependencies>
        <dependency>
            <groupId>io.quarkiverse.groovy</groupId>
            <artifactId>quarkus-groovy</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkiverse.groovy</groupId>
            <artifactId>quarkus-groovy-jaxb</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkiverse.groovy</groupId>
            <artifactId>quarkus-groovy-hibernate-reactive-panache</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-rest-jsonb</artifactId>
        </dependency>
        <!--
        Makes sure that undertow does not interfere with Quarkus REST
        Undertow is blocking so if it interfered it would break everything
        but the RR endpoints should run first
        -->
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-undertow</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-core</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-reactive-pg-client</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-jackson</artifactId>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <scope>compile</scope>
        </dependency>

        <!-- test dependencies -->
        <dependency>
            <groupId>io.quarkiverse.groovy</groupId>
            <artifactId>quarkus-groovy-junit5</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-test-vertx</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-junit5-internal</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>rest-assured</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-test-h2</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-panache-mock</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>net.bytebuddy</groupId>
                    <artifactId>byte-buddy</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.awaitility</groupId>
            <artifactId>awaitility</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <sourceDirectory>src/main/groovy</sourceDirectory>
        <testSourceDirectory>src/test/groovy</testSourceDirectory>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>
        <plugins>
            <plugin>
                <groupId>io.quarkus</groupId>
                <artifactId>quarkus-maven-plugin</artifactId>
                <configuration>
                    <compilerOptions>
                        <!-- Required to be able to use projection class -->
                        <compiler>
                            <name>groovy</name>
                            <args>
                                <arg>groovy.parameters=true</arg>
                            </args>
                        </compiler>
                    </compilerOptions>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>build</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.gmavenplus</groupId>
                <artifactId>gmavenplus-plugin</artifactId>
                <version>${groovy-maven-plugin.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>compile</goal>
                            <goal>compileTests</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <!-- Required to be able to use projection class -->
                    <parameters>true</parameters>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-surefire-plugin</artifactId>
                <executions>
                    <!--
                    The prod mode tests need to be part of a different execution to ensure that they don't mess with the standard tests.
                    By adding this configuration we ensure that the maven surefire plugin will execute twice, one for the regular **/*Test.java
                    tests (using the 'default-test' execution), and one for the prod mode tests (this 'prod-mode' execution)
                    -->
                    <execution>
                        <id>prod-mode</id>
                        <phase>test</phase>
                        <goals>
                            <goal>test</goal>
                        </goals>
                        <configuration>
                            <includes>**/*PMT.java</includes>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <configuration>
                    <images>
                        <image>
                            <name>${postgres.image}</name>
                            <alias>postgresql</alias>
                            <run>
                                <env>
                                    <POSTGRES_USER>hibernate_orm_test</POSTGRES_USER>
                                    <POSTGRES_PASSWORD>hibernate_orm_test</POSTGRES_PASSWORD>
                                    <POSTGRES_DB>hibernate_orm_test</POSTGRES_DB>
                                </env>
                                <ports>
                                    <port>5431:5432</port>
                                </ports>
                                <wait>
                                    <tcp>
                                        <mode>mapped</mode>
                                        <ports>
                                            <port>5432</port>
                                        </ports>
                                    </tcp>
                                    <time>10000</time>
                                </wait>
                            </run>
                        </image>
                    </images>
                    <!--Stops all postgres images currently running, not just those we just started.
                      Useful to stop processes still running from a previously failed integration test run -->
                    <allContainers>true</allContainers>
                </configuration>
                <executions>
                    <execution>
                        <id>docker-start</id>
                        <phase>test-compile</phase>
                        <goals>
                            <goal>stop</goal>
                            <goal>start</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>docker-stop</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>stop</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>docker-prune</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>${docker-prune.location}</executable>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
